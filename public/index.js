// 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API (—Ç–æ–∫–µ–Ω), –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è spotify
// 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram
// 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –∏–≥—Ä–∞–µ—Ç –ª–∏ –ø–µ—Å–Ω—è –≤ –ø–ª–µ–π–±–∞–∫–µ. –ï—Å–ª–∏ –¥–∞ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ—Ç - –æ—á–∏—Å—Ç–∏—Ç—å –±–∏–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
// 4. –ü–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ 3500 —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω API

import fs from "fs";
import requestAuth from "../src/scripts/Spotify/requestAuth.js";
import { requestPlayback } from "../src/scripts/Spotify/requestPlayback.js";
import getFullUser from "../src/scripts/Telegram/getFullUser.js";
import startClient from "../src/scripts/Telegram/startClient.js";
import config from "../config.json" assert { type: "json" };
import restoreBio from "../src/scripts/Telegram/restoreBio.js";
import updateBio from "../src/scripts/Telegram/updateBio.js";
import getFormattedTime from "../src/scripts/common/getFormattedTime.js";

if (config.options.PlaybackCheckInterval < 5000)
    console.warn(
        "You specified a playback status check interval of less than 5 seconds. The script may malfunction."
    );

(async () => {
    const { client, savedSession } = await startClient();

    if (fs.statSync("./src/scripts/Telegram/old_bio.txt").size <= 0) {
        fs.writeFileSync(
            "./src/scripts/Telegram/old_bio.txt",
            (await getFullUser(config.telegram.username, client, savedSession))
                .fullUser.about,
            "utf-8"
        ); // Creating backup of the old bio
    }

    if (config.options.TryRestoreOldBio) {
        process.on("SIGINT", async () => {
            clearInterval(loop);
            await restoreBio(client, savedSession);
            process.exit();
        });
    }

    let authData = await requestAuth();

    // console.log(`Initial token: [${authData.access_token}]`);

    const loop = setInterval(async () => {
        let current = await requestPlayback(authData.access_token);

        if (current === "") {
            if (config.options.LogPlaybackState) {
                await updateBio("üéµ: Playback is empty", client, savedSession);
            } else if (config.options.TryRestoreOldBio) {
                await restoreBio(client, savedSession);
            }
            console.log(`[${getFormattedTime()}] Playback is empty`);
        } else if (current.error) {
            await restoreBio(client, savedSession);
            console.error(current);
            throw new Error("Spotify API error: ", current);
        } else {
            let name = current.item.name;
            let artists = current.item.artists.slice(0);
            let songName = "";
            for (let artist of artists) {
                songName += `${artist.name},`;
            }
            songName = "üéµ: " + songName.slice(0, -1) + " - " + name;

            if (songName.length > 70) songName = songName.slice(0, 67) + "...";

            await updateBio(songName, client, savedSession);

            console.log(`[${getFormattedTime()}] now playing: ${songName}`);
        }
    }, config.options.PlaybackCheckInterval);
})();
